generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model addresses {
  id                                           String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  user_id                                      String    @db.Uuid
  label                                        String?   @db.VarChar(100)
  full_name                                    String?   @db.VarChar(255)
  phone                                        String?   @db.VarChar(30)
  line1                                        String    @db.VarChar(255)
  line2                                        String?   @db.VarChar(255)
  district                                     String?   @db.VarChar(100)
  city                                         String?   @db.VarChar(100)
  province                                     String?   @db.VarChar(100)
  postal_code                                  String?   @db.VarChar(20)
  country                                      String?   @default("Thailand") @db.VarChar(100)
  is_default                                   Boolean?  @default(false)
  created_at                                   DateTime? @default(now()) @db.Timestamptz(6)
  updated_at                                   DateTime? @default(now()) @db.Timestamptz(6)
  users                                        users     @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_addresses_users")
  orders_orders_billing_address_idToaddresses  orders[]  @relation("orders_billing_address_idToaddresses")
  orders_orders_shipping_address_idToaddresses orders[]  @relation("orders_shipping_address_idToaddresses")
}

model cart_items {
  id               String           @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  cart_id          String           @db.Uuid
  variant_id       String           @db.Uuid
  quantity         Int?             @default(1)
  price_at         Decimal          @db.Decimal(12, 2)
  created_at       DateTime?        @default(now()) @db.Timestamptz(6)
  updated_at       DateTime?        @default(now()) @db.Timestamptz(6)
  carts            carts            @relation(fields: [cart_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_cart_items_carts")
  product_variants product_variants @relation(fields: [variant_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_cart_items_variants")

  @@unique([cart_id, variant_id], map: "uq_cart_variant")
}

model carts {
  id          String       @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  user_id     String?      @db.Uuid
  guest_token String?      @db.VarChar(64)
  created_at  DateTime?    @default(now()) @db.Timestamptz(6)
  updated_at  DateTime?    @default(now()) @db.Timestamptz(6)
  cart_items  cart_items[]
  users       users?       @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_carts_users")
}

model categories {
  id                 String               @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  parent_id          String?              @db.Uuid
  slug               String               @unique @db.VarChar(150)
  name               String               @db.VarChar(150)
  description        String?
  created_at         DateTime?            @default(now()) @db.Timestamptz(6)
  updated_at         DateTime?            @default(now()) @db.Timestamptz(6)
  image_url          String?
  categories         categories?          @relation("categoriesTocategories", fields: [parent_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_categories_parent")
  other_categories   categories[]         @relation("categoriesTocategories")
  coupon_categories  coupon_categories[]
  product_categories product_categories[]
}

model collection_products {
  collection_id String      @db.Uuid
  product_id    String      @db.Uuid
  position      Int?        @default(0)
  created_at    DateTime?   @default(now()) @db.Timestamptz(6)
  collections   collections @relation(fields: [collection_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_cp_collections")
  products      products    @relation(fields: [product_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_cp_products")

  @@id([collection_id, product_id])
  @@index([collection_id, position], map: "idx_collection_products_collection")
}

model collections {
  id                  String                @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  slug                String                @unique @db.VarChar(120)
  title               String                @db.VarChar(255)
  description         String?
  type                String?               @default("manual") @db.VarChar(20)
  is_active           Boolean?              @default(true)
  banner_url          String?
  starts_at           DateTime?             @db.Timestamptz(6)
  ends_at             DateTime?             @db.Timestamptz(6)
  rule_json           Json?
  created_at          DateTime?             @default(now()) @db.Timestamptz(6)
  updated_at          DateTime?             @default(now()) @db.Timestamptz(6)
  collection_products collection_products[]
}

model coupon_categories {
  coupon_id   String     @db.Uuid
  category_id String     @db.Uuid
  categories  categories @relation(fields: [category_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  coupons     coupons    @relation(fields: [coupon_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@id([coupon_id, category_id])
}

model coupon_products {
  coupon_id  String   @db.Uuid
  product_id String   @db.Uuid
  coupons    coupons  @relation(fields: [coupon_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  products   products @relation(fields: [product_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@id([coupon_id, product_id])
}

model coupon_rules {
  id        String  @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  coupon_id String  @db.Uuid
  type      String  @db.VarChar(20)
  ref_id    String  @db.Uuid
  coupons   coupons @relation(fields: [coupon_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_coupon_rules")
}

model coupon_users {
  coupon_id String  @db.Uuid
  user_id   String  @db.Uuid
  coupons   coupons @relation(fields: [coupon_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  users     users   @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@id([coupon_id, user_id])
}

model coupons {
  id                String              @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  code              String              @unique @db.VarChar(40)
  type              String              @db.VarChar(20)
  value             Decimal             @db.Decimal(12, 2)
  min_subtotal      Decimal?            @db.Decimal(12, 2)
  starts_at         DateTime?           @db.Timestamptz(6)
  ends_at           DateTime?           @db.Timestamptz(6)
  max_uses          Int?
  used_count        Int?                @default(0)
  is_active         Boolean?            @default(true)
  created_at        DateTime?           @default(now()) @db.Timestamptz(6)
  coupon_categories coupon_categories[]
  coupon_products   coupon_products[]
  coupon_rules      coupon_rules[]
  coupon_users      coupon_users[]
  order_coupons     order_coupons[]
}

model hero_banners {
  id         String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  title      String
  subtitle   String?
  image_url  String
  link_url   String?
  cta_text   String?   @db.VarChar(100)
  badge_text String?   @db.VarChar(100)
  is_active  Boolean   @default(true)
  sort_order Int?      @default(0)
  created_at DateTime? @default(now()) @db.Timestamptz(6)
  updated_at DateTime? @default(now()) @db.Timestamptz(6)
}

model inventory {
  id               String           @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  variant_id       String           @unique @db.Uuid
  quantity         Int?             @default(0)
  low_stock_at     Int?
  updated_at       DateTime?        @default(now()) @db.Timestamptz(6)
  product_variants product_variants @relation(fields: [variant_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_inventory_variants")
}

model order_coupons {
  order_id  String  @db.Uuid
  coupon_id String  @db.Uuid
  discount  Decimal @db.Decimal(12, 2)
  coupons   coupons @relation(fields: [coupon_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_oc_coupons")
  orders    orders  @relation(fields: [order_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_oc_orders")

  @@id([order_id, coupon_id])
}

model order_items {
  id               String           @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  order_id         String           @db.Uuid
  product_id       String           @db.Uuid
  variant_id       String           @db.Uuid
  title            String           @db.VarChar(255)
  sku              String?          @db.VarChar(120)
  unit_price       Decimal          @db.Decimal(12, 2)
  quantity         Int
  total_price      Decimal          @db.Decimal(12, 2)
  line_discount    Decimal?         @default(0) @db.Decimal(12, 2)
  orders           orders           @relation(fields: [order_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_order_items_orders")
  products         products         @relation(fields: [product_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_order_items_products")
  product_variants product_variants @relation(fields: [variant_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_order_items_variants")
}

model orders {
  id                                              String          @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  order_no                                        String          @unique @db.VarChar(30)
  user_id                                         String?         @db.Uuid
  status                                          order_status?   @default(pending)
  subtotal_amount                                 Decimal?        @default(0) @db.Decimal(12, 2)
  discount_amount                                 Decimal?        @default(0) @db.Decimal(12, 2)
  shipping_amount                                 Decimal?        @default(0) @db.Decimal(12, 2)
  tax_amount                                      Decimal?        @default(0) @db.Decimal(12, 2)
  total_amount                                    Decimal?        @default(0) @db.Decimal(12, 2)
  shipping_address_id                             String?         @db.Uuid
  billing_address_id                              String?         @db.Uuid
  note                                            String?
  placed_at                                       DateTime?       @db.Timestamptz(6)
  created_at                                      DateTime?       @default(now()) @db.Timestamptz(6)
  updated_at                                      DateTime?       @default(now()) @db.Timestamptz(6)
  order_coupons                                   order_coupons[]
  order_items                                     order_items[]
  addresses_orders_billing_address_idToaddresses  addresses?      @relation("orders_billing_address_idToaddresses", fields: [billing_address_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_orders_billing")
  addresses_orders_shipping_address_idToaddresses addresses?      @relation("orders_shipping_address_idToaddresses", fields: [shipping_address_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_orders_shipping")
  users                                           users?          @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_orders_users")
  payments                                        payments[]
  shipments                                       shipments[]
}

model payments {
  id         String          @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  order_id   String          @db.Uuid
  provider   String?         @db.VarChar(80)
  status     payment_status? @default(pending)
  amount     Decimal         @db.Decimal(12, 2)
  currency   String?         @default("THB") @db.VarChar(10)
  txn_id     String?         @db.VarChar(150)
  payload    Json?
  paid_at    DateTime?       @db.Timestamptz(6)
  created_at DateTime?       @default(now()) @db.Timestamptz(6)
  orders     orders          @relation(fields: [order_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_payments_orders")
}

model product_categories {
  product_id  String     @db.Uuid
  category_id String     @db.Uuid
  categories  categories @relation(fields: [category_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_pc_categories")
  products    products   @relation(fields: [product_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_pc_products")

  @@id([product_id, category_id])
}

model product_images {
  id         String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  product_id String   @db.Uuid
  url        String
  alt        String?  @db.VarChar(255)
  position   Int?     @default(0)
  products   products @relation(fields: [product_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_product_images")
}

model product_reviews {
  id          String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  product_id  String    @db.Uuid
  user_id     String?   @db.Uuid
  rating      Int
  title       String?   @db.VarChar(255)
  body        String?
  is_approved Boolean?  @default(true)
  created_at  DateTime? @default(now()) @db.Timestamptz(6)
  products    products  @relation(fields: [product_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_reviews_products")
  users       users?    @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_reviews_users")

  @@unique([product_id, user_id], map: "product_reviews_unique_per_user")
}

model product_variants {
  id               String        @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  product_id       String        @db.Uuid
  sku              String        @unique @db.VarChar(120)
  title            String?       @db.VarChar(255)
  price            Decimal       @db.Decimal(12, 2)
  compare_at_price Decimal?      @db.Decimal(12, 2)
  weight_grams     Int?
  attrs_json       Json?
  is_active        Boolean?      @default(true)
  created_at       DateTime?     @default(now()) @db.Timestamptz(6)
  updated_at       DateTime?     @default(now()) @db.Timestamptz(6)
  cart_items       cart_items[]
  inventory        inventory?
  order_items      order_items[]
  products         products      @relation(fields: [product_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_variants_products")
}

model products {
  id                  String                @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  slug                String                @unique @db.VarChar(180)
  name                String                @db.VarChar(255)
  description         String?
  brand               String?               @db.VarChar(120)
  is_active           Boolean?              @default(true)
  created_at          DateTime?             @default(now()) @db.Timestamptz(6)
  updated_at          DateTime?             @default(now()) @db.Timestamptz(6)
  avg_rating          Decimal?              @default(0) @db.Decimal(3, 2)
  reviews_count       Int?                  @default(0)
  is_free_shipping    Boolean?              @default(false)
  collection_products collection_products[]
  coupon_products     coupon_products[]
  order_items         order_items[]
  product_categories  product_categories[]
  product_images      product_images[]
  product_reviews     product_reviews[]
  product_variants    product_variants[]
  wishlist_items      wishlist_items[]
}

model promotions {
  id          String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  slug        String    @unique @db.VarChar(120)
  title       String    @db.VarChar(255)
  subtitle    String?   @db.VarChar(255)
  description String?
  image_url   String?
  link_url    String?
  position    Int?      @default(0)
  is_active   Boolean?  @default(true)
  starts_at   DateTime? @db.Timestamptz(6)
  ends_at     DateTime? @db.Timestamptz(6)
  created_at  DateTime? @default(now()) @db.Timestamptz(6)
  updated_at  DateTime? @default(now()) @db.Timestamptz(6)
  badge_text  String?   @db.VarChar(100)

  @@index([is_active, starts_at, ends_at], map: "idx_promotions_active_time")
  @@index([position(sort: Desc)], map: "idx_promotions_position")
}

model shipments {
  id           String           @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  order_id     String           @db.Uuid
  carrier      String?          @db.VarChar(80)
  tracking_no  String?          @db.VarChar(120)
  status       shipment_status? @default(pending)
  shipped_at   DateTime?        @db.Timestamptz(6)
  delivered_at DateTime?        @db.Timestamptz(6)
  address      Json?
  created_at   DateTime?        @default(now()) @db.Timestamptz(6)
  updated_at   DateTime?        @default(now()) @db.Timestamptz(6)
  orders       orders           @relation(fields: [order_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_shipments_orders")
}

model stores {
  id          String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  slug        String    @unique @db.VarChar(120)
  name        String    @db.VarChar(255)
  description String?
  logo_url    String?
  banner_url  String?
  link_url    String?
  is_active   Boolean?  @default(true)
  created_at  DateTime? @default(now()) @db.Timestamptz(6)
  updated_at  DateTime? @default(now()) @db.Timestamptz(6)

  @@index([is_active], map: "idx_stores_active")
}

model users {
  id              String            @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  email           String            @unique @db.VarChar(255)
  phone           String?           @db.VarChar(30)
  password_hash   String?           @db.VarChar(255)
  role            user_role?        @default(customer)
  full_name       String?           @db.VarChar(255)
  avatar_url      String?
  created_at      DateTime?         @default(now()) @db.Timestamptz(6)
  updated_at      DateTime?         @default(now()) @db.Timestamptz(6)
  deleted_at      DateTime?         @db.Timestamptz(6)
  addresses       addresses[]
  carts           carts[]
  coupon_users    coupon_users[]
  orders          orders[]
  product_reviews product_reviews[]
  wishlist_items  wishlist_items[]
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model wishlist_items {
  id         String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  user_id    String   @db.Uuid
  product_id String   @db.Uuid
  created_at DateTime @default(now()) @db.Timestamptz(6)
  products   products @relation(fields: [product_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_product")
  users      users    @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_user")

  @@unique([user_id, product_id])
}

enum order_status {
  pending
  paid
  processing
  shipped
  delivered
  cancelled
  refunded
}

enum payment_status {
  pending
  authorized
  captured
  failed
  refunded
  cancelled
}

enum shipment_status {
  pending
  packed
  in_transit
  delivered
  returned
  cancelled
}

enum user_role {
  customer
  admin
  staff
}
